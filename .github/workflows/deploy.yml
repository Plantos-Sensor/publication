name: Deploy Node.js Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Build and test job
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests (if available)
        run: npm test --if-present
        
      - name: Build application
        run: npm run build --if-present

  # Deploy to server job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --only=production
        
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            # Navigate to application directory
            cd /home/pi/magazine-website || mkdir -p /home/pi/magazine-website && cd /home/pi/magazine-website
            
            # Stop existing application
            pm2 stop plantos-magazine || true
            
            # Pull latest code
            if [ -d ".git" ]; then
              git pull origin main
            else
              git clone https://github.com/${{ github.repository }} .
            fi
            
            # Install dependencies
            npm ci --only=production
            
            # Create uploads directory if it doesn't exist
            mkdir -p uploads
            
            # Create environment file with secrets
            cat > .env << EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=${{ secrets.DB_PORT }}
            NODE_ENV=production
            EOF
            
            # Start application with PM2
            pm2 start server.js --name plantos-magazine --env production || pm2 restart plantos-magazine
            
            # Save PM2 configuration
            pm2 save
            
            echo "Deployment completed successfully"